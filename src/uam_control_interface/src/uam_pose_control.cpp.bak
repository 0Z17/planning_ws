#include <ros/ros.h>
#include <mavros_msgs/PositionTarget.h>
#include <mavros_msgs/State.h>
#include <geometry_msgs/PoseStamped.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32MultiArray.h>
#include <cmath>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/CommandBool.h>

// global variables to store the subscribed target position and joint angle
double target_x{0}, target_y{0}, target_z{2.0}, target_psi{0}, target_theta{0};

// The callback function for the state topic
mavros_msgs::State current_state;
void state_cb(const mavros_msgs::State::ConstPtr& msg) {
    current_state = *msg;
    // print the current state
    ROS_INFO("Current state: %s", current_state.mode.c_str());
}

// set the target position
void set_target_config(const ros::Publisher& local_pos_pub, const ros::Publisher&  joint_angles,
                        const float x, const float y, const float z, const float psi, const float theta) {
    mavros_msgs::PositionTarget target;
    target.coordinate_frame = mavros_msgs::PositionTarget::FRAME_LOCAL_NED;
    target.type_mask = mavros_msgs::PositionTarget::IGNORE_VX | mavros_msgs::PositionTarget::IGNORE_VY |
                       mavros_msgs::PositionTarget::IGNORE_VZ | mavros_msgs::PositionTarget::IGNORE_AFX |
                       mavros_msgs::PositionTarget::IGNORE_AFY | mavros_msgs::PositionTarget::IGNORE_AFZ |
                       mavros_msgs::PositionTarget::IGNORE_YAW_RATE;

    target.position.x = x;
    target.position.y = y;
    target.position.z = -z;
    target.yaw = psi;

    // geometry_msgs::PoseStamped target;
    // target.header.stamp = ros::Time::now();
    // target.header.frame_id = "map";
    // target.pose.position.x = x;
    // target.pose.position.y = y;
    // target.pose.position.z = -z;
    // // target.pose.orientation.w = std::cos(psi/2);
    // target.pose.orientation.w = 1.0;
    // target.pose.orientation.x = 0.0;
    // target.pose.orientation.y = 0.0;
    // // target.pose.orientation.z = std::sin(psi/2);
    // target.pose.orientation.z = 0.0;

    std_msgs::Float32 theta_msg;
    theta_msg.data = theta;
    local_pos_pub.publish(target);
    // ROS_INFO("Sending target pose");
    joint_angles.publish(theta_msg);
}

void receive_target_callback(const std_msgs::Float32MultiArrayConstPtr& msg) {
    ROS_INFO("Received target position: [%f, %f, %f, %f, %f]", msg->data[0], msg->data[1], msg->data[2], msg->data[3],
             msg->data[4]);
    target_x = msg->data[0];
    target_y = msg->data[1];
    target_z = - msg->data[2];
    target_psi = msg->data[3];
    target_theta = msg->data[4] - M_PI/6;
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "uam_position_control");
    ros::NodeHandle nh;

    // subscribe to the state topic
    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>("mavros/state", 10, state_cb);

    // publish the target position
    // ros::Publisher local_pos_pub = nh.advertise<mavros_msgs::PositionTarget>("mavros/setpoint_raw/local", 10);
    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>("mavros/setpoint_position/local",10);

    // publish the joint angle
    ros::Publisher joint_angle_pub = nh.advertise<std_msgs::Float32>("skyvortex/operator_1_joint/pos_cmd", 10);

    ros::Subscriber target_sub = nh.subscribe<std_msgs::Float32MultiArray>("target_point", 10,
                                                                         receive_target_callback);

    // Services for arming and setting mode
    ros::service::waitForService("mavros/cmd/arming");
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>("mavros/cmd/arming");

    ros::service::waitForService("mavros/set_mode");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>("mavros/set_mode");

    ros::Rate rate(20.0);

    // Set to OFFBOARD mode to allow control
    mavros_msgs::SetMode offboard_mode;
    offboard_mode.request.custom_mode = "OFFBOARD";
    ros::Time last_request = ros::Time::now();
    bool take_off = false;
    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;


    // mavros_msgs::PositionTarget target;
    // target.coordinate_frame = mavros_msgs::PositionTarget::FRAME_LOCAL_NED;
    // target.type_mask = mavros_msgs::PositionTarget::IGNORE_VX | mavros_msgs::PositionTarget::IGNORE_VY |
    //                    mavros_msgs::PositionTarget::IGNORE_VZ | mavros_msgs::PositionTarget::IGNORE_AFX |
    //                    mavros_msgs::PositionTarget::IGNORE_AFY | mavros_msgs::PositionTarget::IGNORE_AFZ |
    //                    mavros_msgs::PositionTarget::IGNORE_YAW_RATE;
    //
    // target.position.x = 0.0;
    // target.position.y = 0.0;
    // target.position.z = 2.0;
    // target.yaw = 0.0;

    geometry_msgs::PoseStamped target;
    // target.header.stamp = ros::Time::now();
    // target.header.frame_id = "map";
    target.pose.position.x = 0.0;
    target.pose.position.y = 0.0;
    target.pose.position.z = 2.0;
    // target.pose.orientation.w = std::cos(psi/2);
    target.pose.orientation.w = 1.0;
    target.pose.orientation.x = 0.0;
    target.pose.orientation.y = 0.0;
    // target.pose.orientation.z = std::sin(psi/2);
    target.pose.orientation.z = 0.0;

    // wait for connection
    while (ros::ok() && !current_state.connected) {
        ROS_INFO("Waiting for connection...");
        ros::spinOnce();
        rate.sleep();
    }

    ROS_INFO("Connection established");

    for(int i = 100; ros::ok() && i > 0; --i){
        local_pos_pub.publish(target);
        ros::spinOnce();
        rate.sleep();
    }

    while (ros::ok() && !take_off) {

        // Set OFFBOARD mode
        if (current_state.mode != "OFFBOARD" && ros::Time::now() - last_request > ros::Duration(5.0)) {
            if (set_mode_client.call(offboard_mode) && offboard_mode.response.mode_sent) {
                ROS_INFO("Offboard mode set.");
                last_request = ros::Time::now();
            } else {
                ROS_ERROR("Failed to set offboard mode.");
            }
        }

        // Arm the vehicle after OFFBOARD mode is set
        if (current_state.mode == "OFFBOARD" && !current_state.armed && (ros::Time::now() - last_request > ros::Duration(5.0))) {
            if (arming_client.call(arm_cmd) && arm_cmd.response.success) {
                ROS_INFO("Vehicle armed.");
                take_off = true;
            } else {
                ROS_ERROR("Failed to arm vehicle.");
            }
            last_request = ros::Time::now();
        }

        local_pos_pub.publish(target);

        ros::spinOnce();
        rate.sleep();
    }


    // while (ros::ok() && !take_off) {
    //
    //     set_target_config(local_pos_pub, joint_angle_pub, 0, 0, 2, 0, 0);
    //
    //     if (current_state.mode != "OFFBOARD" && ros::Time::now() - last_request > ros::Duration(5.0)) {
    //         if (set_mode_client.call(offboard_mode) && offboard_mode.response.mode_sent) {
    //             {
    //                 ROS_INFO("Offboard mode set.");
    //             }
    //             last_request = ros::Time::now();
    //         }
    //     }
    //     else {
    //             if (!current_state.armed && (ros::Time::now() - last_request > ros::Duration(5.0))) {
    //                 if (arming_client.call(arm_cmd) && arm_cmd.response.success) {
    //                     ROS_INFO("Vehicle armed.");
    //                     take_off = true;
    //                 }
    //                 last_request = ros::Time::now();
    //             }
    //         }
    //
    //     ros::spinOnce();
    //     rate.sleep();
    // }

    // main loop
    while (ros::ok()) {
        // ROS_INFO("main loop!!!");

        set_target_config(local_pos_pub, joint_angle_pub, target_x, target_y, target_z, target_psi, target_theta);  // 设置目标位置为(2, 2, 3)

        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}




















// /**
//  * @file offb_node.cpp
//  * @brief offboard example node, written with mavros version 0.14.2, px4 flight
//  * stack and tested in Gazebo SITL
//  */
//
// #include <ros/ros.h>
// #include <geometry_msgs/PoseStamped.h>
// #include <mavros_msgs/CommandBool.h>
// #include <mavros_msgs/CommandTOL.h>
// #include <mavros_msgs/SetMode.h>
// #include <mavros_msgs/State.h>
//
// #define FLIGHT_ALTITUDE 1.5f
//
// mavros_msgs::State current_state;
// void state_cb(const mavros_msgs::State::ConstPtr& msg){
//     current_state = *msg;
// }
//
// int main(int argc, char **argv)
// {
//     ros::init(argc, argv, "offb_node");
//     ros::NodeHandle nh;
//
//     ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
//             ("mavros/state", 10, state_cb);
//     ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
//             ("mavros/setpoint_position/local", 10);
//     ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
//             ("mavros/cmd/arming");
//     ros::ServiceClient land_client = nh.serviceClient<mavros_msgs::CommandTOL>
//       ("mavros/cmd/land");
//     ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
//             ("mavros/set_mode");
//
//     //the setpoint publishing rate MUST be faster than 2Hz
//     ros::Rate rate(20.0);
//
//     // wait for FCU connection
//     while(ros::ok() && current_state.connected){
//         ros::spinOnce();
//         rate.sleep();
//         ROS_INFO("connecting to FCT...");
//     }
//
//     geometry_msgs::PoseStamped pose;
//     pose.pose.position.x = 0;
//     pose.pose.position.y = 0;
//     pose.pose.position.z = FLIGHT_ALTITUDE;
//
//     //send a few setpoints before starting
//     for(int i = 100; ros::ok() && i > 0; --i){
//         local_pos_pub.publish(pose);
//         ros::spinOnce();
//         rate.sleep();
//     }
//
//     mavros_msgs::SetMode offb_set_mode;
//     offb_set_mode.request.custom_mode = "OFFBOARD";
//
//     mavros_msgs::CommandBool arm_cmd;
//     arm_cmd.request.value = true;
//
//     mavros_msgs::CommandTOL land_cmd;
//     land_cmd.request.yaw = 0;
//     land_cmd.request.latitude = 0;
//     land_cmd.request.longitude = 0;
//     land_cmd.request.altitude = 0;
//
//     ros::Time last_request = ros::Time::now();
//
//     // change to offboard mode and arm
//     while(ros::ok() && !current_state.armed){
//         if( current_state.mode != "OFFBOARD" &&
//             (ros::Time::now() - last_request > ros::Duration(5.0))){
//           ROS_INFO(current_state.mode.c_str());
//             if( set_mode_client.call(offb_set_mode) &&
//                 offb_set_mode.response.mode_sent){
//                 ROS_INFO("Offboard enabled");
//             }
//             last_request = ros::Time::now();
//         } else {
//             if( !current_state.armed &&
//                 (ros::Time::now() - last_request > ros::Duration(5.0))){
//                 if( arming_client.call(arm_cmd) &&
//                     arm_cmd.response.success){
//                     ROS_INFO("Vehicle armed");
//                 }
//                 last_request = ros::Time::now();
//             }
//         }
//         local_pos_pub.publish(pose);
//         ros::spinOnce();
//         rate.sleep();
//     }
//
//     // go to the first waypoint
//     pose.pose.position.x = 0;
//     pose.pose.position.y = 0;
//     pose.pose.position.z = FLIGHT_ALTITUDE;
//
//     ROS_INFO("going to the first way point");
//     for(int i = 0; ros::ok() && i < 10*20; ++i){
//       local_pos_pub.publish(pose);
//       ros::spinOnce();
//       rate.sleep();
//     }
//     ROS_INFO("first way point finished!");
//
//
//     // go to the second waypoint
//     pose.pose.position.x = 0;
//     pose.pose.position.y = 1;
//     pose.pose.position.z = FLIGHT_ALTITUDE;
//
//     //send setpoints for 10 seconds
//     ROS_INFO("going to second way point");
//     for(int i = 0; ros::ok() && i < 10*20; ++i){
//
//       local_pos_pub.publish(pose);
//       ros::spinOnce();
//       rate.sleep();
//     }
//     ROS_INFO("second way point finished!");
//
//     // go to the third waypoint
//     pose.pose.position.x = 1;
//     pose.pose.position.y = 1;
//     pose.pose.position.z = FLIGHT_ALTITUDE;
//     //send setpoints for 10 seconds
//     ROS_INFO("going to third way point");
//     for(int i = 0; ros::ok() && i < 10*20; ++i){
//
//       local_pos_pub.publish(pose);
//       ros::spinOnce();
//       rate.sleep();
//     }
//     ROS_INFO("third way point finished!");
//
//     // go to the forth waypoint
//     pose.pose.position.x = 1;
//     pose.pose.position.y = 0;
//     pose.pose.position.z = FLIGHT_ALTITUDE;
//     //send setpoints for 10 seconds
//     ROS_INFO("going to forth way point");
//     for(int i = 0; ros::ok() && i < 10*20; ++i){
//
//       local_pos_pub.publish(pose);
//       ros::spinOnce();
//       rate.sleep();
//     }
//     ROS_INFO("forth way point finished!");
//
//     pose.pose.position.x = 0;
//     pose.pose.position.y = 0;
//     pose.pose.position.z = FLIGHT_ALTITUDE;
//     ROS_INFO("going back to the first point!");
//     //send setpoints for 10 seconds
//     for(int i = 0; ros::ok() && i < 10*20; ++i){
//
//       local_pos_pub.publish(pose);
//       ros::spinOnce();
//       rate.sleep();
//     }
//
//     ROS_INFO("tring to land");
//     while (!(land_client.call(land_cmd) &&
//             land_cmd.response.success)){
//       //local_pos_pub.publish(pose);
//       ROS_INFO("tring to land");
//       ros::spinOnce();
//       rate.sleep();
//     }
//     return 0;
// }