#include <ros/ros.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>
#include <mavros_msgs/ActuatorControl.h>
#include <geometry_msgs/PoseStamped.h>

mavros_msgs::State current_state;
geometry_msgs::PoseStamped current_pose;

void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}

void local_position_cb(const geometry_msgs::PoseStamped::ConstPtr& msg){
    current_pose = *msg;
}

int main(int argc, char **argv){
    ros::init(argc, argv, "uav_control_node");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);
    ros::Subscriber position_sub = nh.subscribe<geometry_msgs::PoseStamped>
            ("mavros/local_position/pose", 10, local_position_cb); // 订阅无人机当前位置
    ros::Publisher actuator_pub = nh.advertise<mavros_msgs::ActuatorControl>
            ("mavros/actuator_control", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");

    // Ensure the ROS node handle is ready and the UAV is connected
    while(ros::ok() && !current_state.connected){
        ros::spinOnce();
        ros::Rate(10).sleep();
    }

    mavros_msgs::ActuatorControl act_control;
    act_control.group_mix = 0; // Set group_mix to PX4_MIX_FLIGHT_CONTROL

    // Initialize control values to zero
    for (int i = 0; i < 8; ++i) {
        act_control.controls[i] = 0.0;
    }

    // Arming the UAV
    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    if(arming_client.call(arm_cmd) && arm_cmd.response.success){
        ROS_INFO("UAV armed");
    } else {
        ROS_ERROR("Failed to arm UAV");
        return -1;
    }

    // Set the UAV to OFFBOARD mode
    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";
    if(set_mode_client.call(offb_set_mode) && offb_set_mode.response.mode_sent){
        ROS_INFO("Offboard mode enabled");
    }

    ros::Rate rate(20.0); // Control communication rate

    bool is_takeoff = true; // 标志无人机是否在起飞过程中

    while(ros::ok()){
        if (is_takeoff) {
            // During takeoff
            if(current_pose.pose.position.z >= 2.0){
                // if altitude is reached 2 meters, we stop takeoff
                is_takeoff = false;
                // Do not publish any control signal to hover
            } else {
                // Continue takeoff
                act_control.controls[10] = 0.5; // Throttle value for 0.2m/s ascent speed
                actuator_pub.publish(act_control);
            }
        } else {
            // If the drone reaches 2 meters altitude or higher, the mission is complete
            // Depending on your PX4 parameters, you might need to publish an empty message
            // to keep the drone in OFFBOARD mode or it might switch to a fail-safe mode.
            
            // Publish zero velocities or switch to position/altitude hold
            // Publish empty actuator control to hold the position
            act_control.controls[10] = 0.1; // Set throttle to zero to hover
            actuator_pub.publish(act_control);
        }

        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}